This patch is constructed from code located here: https://github.com/Drako/gambatte/commit/160e2d3db9358cc11946a1739d6962d9d1055a3f
Upstream-Status: Inappropriate
diff --git a/gambatte_sdl/src/blitterwrapper.cpp b/gambatte_sdl/src/blitterwrapper.cpp
index bb429441..219ef7bb 100755
--- a/gambatte_sdl/src/blitterwrapper.cpp
+++ b/gambatte_sdl/src/blitterwrapper.cpp
@@ -21,8 +21,8 @@
 #include "videolink/vfilterinfo.h"
 #include "videolink/videolink.h"
 
-BlitterWrapper::BlitterWrapper(VfilterInfo const &vfinfo, int scale, bool yuv, bool full)
-: blitter_(vfinfo.outWidth, vfinfo.outHeight, scale, yuv, full)
+BlitterWrapper::BlitterWrapper(VfilterInfo const &vfinfo, int scale, bool full)
+: blitter_(vfinfo.outWidth, vfinfo.outHeight, scale, full)
 , cconvert_(Rgb32Conv::create(static_cast<Rgb32Conv::PixelFormat>(blitter_.inBuffer().format),
                               vfinfo.outWidth, vfinfo.outHeight))
 , vfilter_(vfinfo.create())
diff --git a/gambatte_sdl/src/blitterwrapper.h b/gambatte_sdl/src/blitterwrapper.h
index 626f3b93..85665292 100755
--- a/gambatte_sdl/src/blitterwrapper.h
+++ b/gambatte_sdl/src/blitterwrapper.h
@@ -30,7 +30,7 @@ class BlitterWrapper {
 public:
 	struct Buf { gambatte::uint_least32_t *pixels; std::ptrdiff_t pitch; };
 
-	BlitterWrapper(VfilterInfo const &, int scale, bool yuv, bool full);
+	BlitterWrapper(VfilterInfo const &, int scale, bool full);
 	~BlitterWrapper();
 	Buf inBuf() const;
 	void draw();
diff --git a/gambatte_sdl/src/gambatte_sdl.cpp b/gambatte_sdl/src/gambatte_sdl.cpp
index 888abbb5..7033dc29 100644
--- a/gambatte_sdl/src/gambatte_sdl.cpp
+++ b/gambatte_sdl/src/gambatte_sdl.cpp
@@ -270,7 +270,7 @@ struct InputId {
 	enum { type_key, type_jbutton, type_jaxis, type_jhat } type;
 	union {
 		JoyData jdata;
-		SDLKey keydata;
+		SDL_Keycode keydata;
 	};
 
 	InputId() : type(type_key), keydata() {}
@@ -383,7 +383,7 @@ void InputOption::exec(char const *const *argv, int index) {
 			}
 
 			ids_[i] = id;
-		} else if (SDLKey const *k = strToSdlkey(s)) {
+		} else if (SDL_Keycode const *k = strToSdlkey(s)) {
 			ids_[i].type = InputId::type_key;
 			ids_[i].keydata = *k;
 		}
@@ -484,7 +484,7 @@ public:
 	int exec(int argc, char const *const argv[]);
 
 private:
-	typedef std::multimap<SDLKey,  InputGetter::Button> keymap_t;
+	typedef std::multimap<SDL_Keycode,  InputGetter::Button> keymap_t;
 	typedef std::multimap<JoyData, InputGetter::Button> jmap_t;
 
 	GetInput inputGetter;
@@ -569,8 +569,6 @@ int GambatteSdl::exec(int const argc, char const *const argv[]) {
 	ResamplerOption resamplerOption;
 	ScaleOption scaleOption;
 	VfOption vfOption;
-	BoolOption yuvOption("\t\tUse YUV overlay for (usually faster) scaling\n",
-	                     "yuv-overlay", 'y');
 	BoolOption gbaCgbOption("\t\t\tGBA CGB mode\n", "gba-cgb");
 	BoolOption forceDmgOption("\t\tForce DMG mode\n", "force-dmg");
 	BoolOption multicartCompatOption(
@@ -596,7 +594,6 @@ int GambatteSdl::exec(int const argc, char const *const argv[]) {
 		v.push_back(&resamplerOption);
 		v.push_back(&scaleOption);
 		v.push_back(&vfOption);
-		v.push_back(&yuvOption);
 
 		Parser parser;
 		std::for_each(v.begin(), v.end(),
@@ -674,10 +671,9 @@ int GambatteSdl::exec(int const argc, char const *const argv[]) {
 	JsOpen jsOpen(jdevnums.begin(), jdevnums.end());
 	SDL_JoystickEventState(SDL_ENABLE);
 	BlitterWrapper blitter(vfOption.filter(),
-	                       scaleOption.scale(), yuvOption.isSet(),
+	                       scaleOption.scale(),
 	                       fsOption.isSet());
 	SDL_ShowCursor(SDL_DISABLE);
-	SDL_WM_SetCaption("Gambatte SDL", 0);
 
 	return run(rateOption.rate(), latencyOption.latency(), periodsOption.periods(),
 	           resamplerOption.resampler(), blitter);
@@ -793,7 +789,7 @@ int GambatteSdl::run(long const sampleRate, int const latency, int const periods
 	AudioOut aout(sampleRate, latency, periods, resamplerInfo, audioBuf.size());
 	FrameWait frameWait;
 	SkipSched skipSched;
-	Uint8 const *const keys = SDL_GetKeyState(0);
+	Uint8 const *const keys = SDL_GetKeyboardState(0);
 	std::size_t bufsamples = 0;
 	bool audioOutBufLow = false;
 
diff --git a/gambatte_sdl/src/sdlblitter.cpp b/gambatte_sdl/src/sdlblitter.cpp
index 5730e559..c98a2329 100644
--- a/gambatte_sdl/src/sdlblitter.cpp
+++ b/gambatte_sdl/src/sdlblitter.cpp
@@ -22,43 +22,25 @@
 
 struct SdlBlitter::SurfaceDeleter {
 	static void del(SDL_Surface *s) { SDL_FreeSurface(s); }
-	static void del(SDL_Overlay *o) {
-		if (o) {
-			SDL_UnlockYUVOverlay(o);
-			SDL_FreeYUVOverlay(o);
-		}
-	}
 };
 
 SdlBlitter::SdlBlitter(unsigned inwidth, unsigned inheight,
-                       int scale, bool yuv, bool startFull)
-: screen_(SDL_SetVideoMode(inwidth * scale, inheight * scale,
-                           SDL_GetVideoInfo()->vfmt->BitsPerPixel == 16 ? 16 : 32,
-                           SDL_SWSURFACE | (startFull ? SDL_FULLSCREEN : 0)))
-, surface_(screen_ && scale > 1 && !yuv
+                       int scale, bool startFull)
+: screen_ (SDL_CreateWindow("Gambatte SDL", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, inwidth * scale, inheight * scale, startFull ? SDL_WINDOW_FULLSCREEN_DESKTOP : 0))
+, screen_surface_(SDL_GetWindowSurface(screen_))
+, surface_(screen_surface_ && scale > 1
            ? SDL_CreateRGBSurface(SDL_SWSURFACE, inwidth, inheight,
-                                  screen_->format->BitsPerPixel, 0, 0, 0, 0)
-           : 0)
-, overlay_(screen_ && scale > 1 && yuv
-           ? SDL_CreateYUVOverlay(inwidth * 2, inheight, SDL_UYVY_OVERLAY, screen_)
-           : 0)
-{
-	if (overlay_)
-		SDL_LockYUVOverlay(overlay_.get());
+                                  screen_surface_->format->BitsPerPixel, 0, 0, 0, 0)
+           : nullptr) {
 }
-
 SdlBlitter::~SdlBlitter() {
 }
 
 SdlBlitter::PixelBuffer SdlBlitter::inBuffer() const {
 	PixelBuffer pb = { 0, 0, RGB32 };
 
-	if (overlay_) {
-		pb.pixels = overlay_->pixels[0];
-		pb.format = UYVY;
-		pb.pitch = overlay_->pitches[0] >> 2;
-	} else if (SDL_Surface *s = surface_ ? surface_.get() : screen_) {
-		pb.pixels = static_cast<char *>(s->pixels) + s->offset;
+	if (SDL_Surface *s = surface_ ? surface_.get() : screen_surface_) {
+		pb.pixels = static_cast<char *>(s->pixels);
 		pb.format = s->format->BitsPerPixel == 16 ? RGB16 : RGB32;
 		pb.pitch = s->pitch / s->format->BytesPerPixel;
 	}
@@ -68,14 +50,14 @@ SdlBlitter::PixelBuffer SdlBlitter::inBuffer() const {
 
 template<typename T>
 inline void SdlBlitter::swScale() {
-	T const *src = reinterpret_cast<T *>(static_cast<char *>(surface_->pixels) + surface_->offset);
-	T       *dst = reinterpret_cast<T *>(static_cast<char *>(screen_->pixels) + screen_->offset);
+	T const *src = reinterpret_cast<T *>(static_cast<char *>(surface_->pixels));
+	T       *dst = reinterpret_cast<T *>(static_cast<char *>(screen_surface_->pixels));
 	scaleBuffer(src, dst, surface_->w, surface_->h,
-	            screen_->pitch / screen_->format->BytesPerPixel, screen_->h / surface_->h);
+	            screen_surface_->pitch / screen_surface_->format->BytesPerPixel, screen_surface_->h / surface_->h);
 }
 
 void SdlBlitter::draw() {
-	if (surface_ && screen_) {
+	if (surface_ && screen_surface_) {
 		if (surface_->format->BitsPerPixel == 16)
 			swScale<Uint16>();
 		else
@@ -84,22 +66,18 @@ void SdlBlitter::draw() {
 }
 
 void SdlBlitter::present() {
-	if (!screen_)
+	if (!screen_surface_)
 		return;
 
-	if (overlay_) {
-		SDL_Rect dstr = { 0, 0, Uint16(screen_->w), Uint16(screen_->h) };
-		SDL_UnlockYUVOverlay(overlay_.get());
-		SDL_DisplayYUVOverlay(overlay_.get(), &dstr);
-		SDL_LockYUVOverlay(overlay_.get());
-	} else {
-		SDL_UpdateRect(screen_, 0, 0, screen_->w, screen_->h);
-	}
+    SDL_UpdateWindowSurface(screen_);
 }
 
 void SdlBlitter::toggleFullScreen() {
 	if (screen_) {
-		screen_ = SDL_SetVideoMode(screen_->w, screen_->h, screen_->format->BitsPerPixel,
-		                           screen_->flags ^ SDL_FULLSCREEN);
+	    auto const flags = SDL_GetWindowFlags(screen_);
+	    if (flags & SDL_WINDOW_FULLSCREEN_DESKTOP)
+	        SDL_SetWindowFullscreen(screen_, 0);
+	    else
+	        SDL_SetWindowFullscreen(screen_, SDL_WINDOW_FULLSCREEN_DESKTOP);
 	}
 }
diff --git a/gambatte_sdl/src/sdlblitter.h b/gambatte_sdl/src/sdlblitter.h
index 20093cc2..754654eb 100644
--- a/gambatte_sdl/src/sdlblitter.h
+++ b/gambatte_sdl/src/sdlblitter.h
@@ -24,6 +24,7 @@
 
 struct SDL_Overlay;
 struct SDL_Surface;
+struct SDL_Window;
 
 class SdlBlitter {
 public:
@@ -36,7 +37,7 @@ public:
 	};
 
 	SdlBlitter(unsigned inwidth, unsigned inheight,
-	           int scale, bool yuv, bool full);
+	           int scale, bool full);
 	~SdlBlitter();
 	PixelBuffer inBuffer() const;
 	void draw();
@@ -46,9 +47,9 @@ public:
 private:
 	struct SurfaceDeleter;
 
-	SDL_Surface *screen_;
+	SDL_Window *screen_;
+	SDL_Surface *screen_surface_;
 	scoped_ptr<SDL_Surface, SurfaceDeleter> const surface_;
-	scoped_ptr<SDL_Overlay, SurfaceDeleter> const overlay_;
 
 	template<typename T> void swScale();
 };
diff --git a/gambatte_sdl/src/str_to_sdlkey.cpp b/gambatte_sdl/src/str_to_sdlkey.cpp
index c4041a49..0a81716d 100644
--- a/gambatte_sdl/src/str_to_sdlkey.cpp
+++ b/gambatte_sdl/src/str_to_sdlkey.cpp
@@ -29,7 +29,7 @@ struct StrLess {
 	}
 };
 
-typedef std::map<char const *, SDLKey, StrLess> map_t;
+typedef std::map<char const *, SDL_Keycode, StrLess> map_t;
 
 static void initStrKeyMap(map_t &m) {
 	m.insert(std::make_pair("backspace", SDLK_BACKSPACE));
@@ -103,112 +103,16 @@ static void initStrKeyMap(map_t &m) {
 	m.insert(std::make_pair("y", SDLK_y));
 	m.insert(std::make_pair("z", SDLK_z));
 	m.insert(std::make_pair("delete", SDLK_DELETE));
-	m.insert(std::make_pair("world_0", SDLK_WORLD_0));
-	m.insert(std::make_pair("world_1", SDLK_WORLD_1));
-	m.insert(std::make_pair("world_2", SDLK_WORLD_2));
-	m.insert(std::make_pair("world_3", SDLK_WORLD_3));
-	m.insert(std::make_pair("world_4", SDLK_WORLD_4));
-	m.insert(std::make_pair("world_5", SDLK_WORLD_5));
-	m.insert(std::make_pair("world_6", SDLK_WORLD_6));
-	m.insert(std::make_pair("world_7", SDLK_WORLD_7));
-	m.insert(std::make_pair("world_8", SDLK_WORLD_8));
-	m.insert(std::make_pair("world_9", SDLK_WORLD_9));
-	m.insert(std::make_pair("world_10", SDLK_WORLD_10));
-	m.insert(std::make_pair("world_11", SDLK_WORLD_11));
-	m.insert(std::make_pair("world_12", SDLK_WORLD_12));
-	m.insert(std::make_pair("world_13", SDLK_WORLD_13));
-	m.insert(std::make_pair("world_14", SDLK_WORLD_14));
-	m.insert(std::make_pair("world_15", SDLK_WORLD_15));
-	m.insert(std::make_pair("world_16", SDLK_WORLD_16));
-	m.insert(std::make_pair("world_17", SDLK_WORLD_17));
-	m.insert(std::make_pair("world_18", SDLK_WORLD_18));
-	m.insert(std::make_pair("world_19", SDLK_WORLD_19));
-	m.insert(std::make_pair("world_20", SDLK_WORLD_20));
-	m.insert(std::make_pair("world_21", SDLK_WORLD_21));
-	m.insert(std::make_pair("world_22", SDLK_WORLD_22));
-	m.insert(std::make_pair("world_23", SDLK_WORLD_23));
-	m.insert(std::make_pair("world_24", SDLK_WORLD_24));
-	m.insert(std::make_pair("world_25", SDLK_WORLD_25));
-	m.insert(std::make_pair("world_26", SDLK_WORLD_26));
-	m.insert(std::make_pair("world_27", SDLK_WORLD_27));
-	m.insert(std::make_pair("world_28", SDLK_WORLD_28));
-	m.insert(std::make_pair("world_29", SDLK_WORLD_29));
-	m.insert(std::make_pair("world_30", SDLK_WORLD_30));
-	m.insert(std::make_pair("world_31", SDLK_WORLD_31));
-	m.insert(std::make_pair("world_32", SDLK_WORLD_32));
-	m.insert(std::make_pair("world_33", SDLK_WORLD_33));
-	m.insert(std::make_pair("world_34", SDLK_WORLD_34));
-	m.insert(std::make_pair("world_35", SDLK_WORLD_35));
-	m.insert(std::make_pair("world_36", SDLK_WORLD_36));
-	m.insert(std::make_pair("world_37", SDLK_WORLD_37));
-	m.insert(std::make_pair("world_38", SDLK_WORLD_38));
-	m.insert(std::make_pair("world_39", SDLK_WORLD_39));
-	m.insert(std::make_pair("world_40", SDLK_WORLD_40));
-	m.insert(std::make_pair("world_41", SDLK_WORLD_41));
-	m.insert(std::make_pair("world_42", SDLK_WORLD_42));
-	m.insert(std::make_pair("world_43", SDLK_WORLD_43));
-	m.insert(std::make_pair("world_44", SDLK_WORLD_44));
-	m.insert(std::make_pair("world_45", SDLK_WORLD_45));
-	m.insert(std::make_pair("world_46", SDLK_WORLD_46));
-	m.insert(std::make_pair("world_47", SDLK_WORLD_47));
-	m.insert(std::make_pair("world_48", SDLK_WORLD_48));
-	m.insert(std::make_pair("world_49", SDLK_WORLD_49));
-	m.insert(std::make_pair("world_50", SDLK_WORLD_50));
-	m.insert(std::make_pair("world_51", SDLK_WORLD_51));
-	m.insert(std::make_pair("world_52", SDLK_WORLD_52));
-	m.insert(std::make_pair("world_53", SDLK_WORLD_53));
-	m.insert(std::make_pair("world_54", SDLK_WORLD_54));
-	m.insert(std::make_pair("world_55", SDLK_WORLD_55));
-	m.insert(std::make_pair("world_56", SDLK_WORLD_56));
-	m.insert(std::make_pair("world_57", SDLK_WORLD_57));
-	m.insert(std::make_pair("world_58", SDLK_WORLD_58));
-	m.insert(std::make_pair("world_59", SDLK_WORLD_59));
-	m.insert(std::make_pair("world_60", SDLK_WORLD_60));
-	m.insert(std::make_pair("world_61", SDLK_WORLD_61));
-	m.insert(std::make_pair("world_62", SDLK_WORLD_62));
-	m.insert(std::make_pair("world_63", SDLK_WORLD_63));
-	m.insert(std::make_pair("world_64", SDLK_WORLD_64));
-	m.insert(std::make_pair("world_65", SDLK_WORLD_65));
-	m.insert(std::make_pair("world_66", SDLK_WORLD_66));
-	m.insert(std::make_pair("world_67", SDLK_WORLD_67));
-	m.insert(std::make_pair("world_68", SDLK_WORLD_68));
-	m.insert(std::make_pair("world_69", SDLK_WORLD_69));
-	m.insert(std::make_pair("world_70", SDLK_WORLD_70));
-	m.insert(std::make_pair("world_71", SDLK_WORLD_71));
-	m.insert(std::make_pair("world_72", SDLK_WORLD_72));
-	m.insert(std::make_pair("world_73", SDLK_WORLD_73));
-	m.insert(std::make_pair("world_74", SDLK_WORLD_74));
-	m.insert(std::make_pair("world_75", SDLK_WORLD_75));
-	m.insert(std::make_pair("world_76", SDLK_WORLD_76));
-	m.insert(std::make_pair("world_77", SDLK_WORLD_77));
-	m.insert(std::make_pair("world_78", SDLK_WORLD_78));
-	m.insert(std::make_pair("world_79", SDLK_WORLD_79));
-	m.insert(std::make_pair("world_80", SDLK_WORLD_80));
-	m.insert(std::make_pair("world_81", SDLK_WORLD_81));
-	m.insert(std::make_pair("world_82", SDLK_WORLD_82));
-	m.insert(std::make_pair("world_83", SDLK_WORLD_83));
-	m.insert(std::make_pair("world_84", SDLK_WORLD_84));
-	m.insert(std::make_pair("world_85", SDLK_WORLD_85));
-	m.insert(std::make_pair("world_86", SDLK_WORLD_86));
-	m.insert(std::make_pair("world_87", SDLK_WORLD_87));
-	m.insert(std::make_pair("world_88", SDLK_WORLD_88));
-	m.insert(std::make_pair("world_89", SDLK_WORLD_89));
-	m.insert(std::make_pair("world_90", SDLK_WORLD_90));
-	m.insert(std::make_pair("world_91", SDLK_WORLD_91));
-	m.insert(std::make_pair("world_92", SDLK_WORLD_92));
-	m.insert(std::make_pair("world_93", SDLK_WORLD_93));
-	m.insert(std::make_pair("world_94", SDLK_WORLD_94));
-	m.insert(std::make_pair("world_95", SDLK_WORLD_95));
-	m.insert(std::make_pair("kp_0", SDLK_KP0));
-	m.insert(std::make_pair("kp_1", SDLK_KP1));
-	m.insert(std::make_pair("kp_2", SDLK_KP2));
-	m.insert(std::make_pair("kp_3", SDLK_KP3));
-	m.insert(std::make_pair("kp_4", SDLK_KP4));
-	m.insert(std::make_pair("kp_5", SDLK_KP5));
-	m.insert(std::make_pair("kp_6", SDLK_KP6));
-	m.insert(std::make_pair("kp_7", SDLK_KP7));
-	m.insert(std::make_pair("kp_8", SDLK_KP8));
-	m.insert(std::make_pair("kp_9", SDLK_KP9));
+	m.insert(std::make_pair("kp_0", SDLK_KP_0));
+	m.insert(std::make_pair("kp_1", SDLK_KP_1));
+	m.insert(std::make_pair("kp_2", SDLK_KP_2));
+	m.insert(std::make_pair("kp_3", SDLK_KP_3));
+	m.insert(std::make_pair("kp_4", SDLK_KP_4));
+	m.insert(std::make_pair("kp_5", SDLK_KP_5));
+	m.insert(std::make_pair("kp_6", SDLK_KP_6));
+	m.insert(std::make_pair("kp_7", SDLK_KP_7));
+	m.insert(std::make_pair("kp_8", SDLK_KP_8));
+	m.insert(std::make_pair("kp_9", SDLK_KP_9));
 	m.insert(std::make_pair("kp_period", SDLK_KP_PERIOD));
 	m.insert(std::make_pair("kp_divide", SDLK_KP_DIVIDE));
 	m.insert(std::make_pair("kp_multiply", SDLK_KP_MULTIPLY));
@@ -240,28 +144,25 @@ static void initStrKeyMap(map_t &m) {
 	m.insert(std::make_pair("f13", SDLK_F13));
 	m.insert(std::make_pair("f14", SDLK_F14));
 	m.insert(std::make_pair("f15", SDLK_F15));
-	m.insert(std::make_pair("numlock", SDLK_NUMLOCK));
+	m.insert(std::make_pair("numlock", SDLK_NUMLOCKCLEAR));
 	m.insert(std::make_pair("capslock", SDLK_CAPSLOCK));
-	m.insert(std::make_pair("scrollock", SDLK_SCROLLOCK));
+	m.insert(std::make_pair("scrollock", SDLK_SCROLLLOCK));
 	m.insert(std::make_pair("rshift", SDLK_RSHIFT));
 	m.insert(std::make_pair("lshift", SDLK_LSHIFT));
 	m.insert(std::make_pair("rctrl", SDLK_RCTRL));
 	m.insert(std::make_pair("lctrl", SDLK_LCTRL));
 	m.insert(std::make_pair("ralt", SDLK_RALT));
 	m.insert(std::make_pair("lalt", SDLK_LALT));
-	m.insert(std::make_pair("rmeta", SDLK_RMETA));
-	m.insert(std::make_pair("lmeta", SDLK_LMETA));
-	m.insert(std::make_pair("lsuper", SDLK_LSUPER));
-	m.insert(std::make_pair("rsuper", SDLK_RSUPER));
+	m.insert(std::make_pair("lsuper", SDLK_LGUI));
+	m.insert(std::make_pair("rsuper", SDLK_RGUI));
 	m.insert(std::make_pair("mode", SDLK_MODE));
-	m.insert(std::make_pair("compose", SDLK_COMPOSE));
+	m.insert(std::make_pair("compose", SDLK_APPLICATION));
 	m.insert(std::make_pair("help", SDLK_HELP));
-	m.insert(std::make_pair("printscreen", SDLK_PRINT));
+	m.insert(std::make_pair("printscreen", SDLK_PRINTSCREEN));
 	m.insert(std::make_pair("sysrq", SDLK_SYSREQ));
-	m.insert(std::make_pair("break", SDLK_BREAK));
+	m.insert(std::make_pair("break", SDLK_PAUSE));
 	m.insert(std::make_pair("menu", SDLK_MENU));
 	m.insert(std::make_pair("power", SDLK_POWER));
-	m.insert(std::make_pair("euro", SDLK_EURO));
 	m.insert(std::make_pair("undo", SDLK_UNDO));
 }
 
@@ -280,7 +181,7 @@ void printStrSdlkeys() {
 		printf("%s\n", it->first);
 }
 
-SDLKey const * strToSdlkey(char const *str) {
+SDL_Keycode const * strToSdlkey(char const *str) {
 	map_t::const_iterator it = m.find(str);
 	return it == m.end() ? 0 : &it->second;
-}
+}
\ No newline at end of file
diff --git a/gambatte_sdl/src/str_to_sdlkey.h b/gambatte_sdl/src/str_to_sdlkey.h
index a0ba345c..e8921f73 100644
--- a/gambatte_sdl/src/str_to_sdlkey.h
+++ b/gambatte_sdl/src/str_to_sdlkey.h
@@ -21,7 +21,7 @@
 
 #include <SDL.h>
 
-SDLKey const * strToSdlkey(char const *str);
+SDL_Keycode const * strToSdlkey(char const *str);
 void printStrSdlkeys();
 
 #endif
