This patch is constructed from code located here: https://github.com/iotivity/iotivity/blob/master/build_common/SConscript
Upstream-Status: Inappropriate
diff --git a/gambatte_sdl/SConstruct b/gambatte_sdl/SConstruct
index e1312f24..e7e70554 100644
--- a/gambatte_sdl/SConstruct
+++ b/gambatte_sdl/SConstruct
@@ -11,7 +11,61 @@ env = Environment(CPPPATH = ['src', '../libgambatte/include', '../common'],
                   CXXFLAGS = cxxflags,
                   CPPDEFINES = [ 'HAVE_STDINT_H', None ],
                   variables = vars)
-env.ParseConfig('sdl-config --cflags --libs')
+
+env['CONFIG_ENVIRONMENT_IMPORT'] = True
+
+'''
+This code injects Yocto cross-compilation tools+flags into the scons
+construction environment in order to invoke the relevant tools while
+performing a build.
+'''
+import os.path
+try:
+	CC = os.environ['CC']
+	target_prefix = CC.split()[0]
+	target_prefix = target_prefix[:-3]
+	tools = {
+		"CC": target_prefix + "gcc",
+		"CXX": target_prefix + "g++",
+		"AS": target_prefix + "as",
+		"LD": target_prefix + "ld",
+		"GDB": target_prefix + "gdb",
+		"STRIP": target_prefix + "strip",
+		"RANLIB": target_prefix + "ranlib",
+		"OBJCOPY": target_prefix + "objcopy",
+		"OBJDUMP": target_prefix + "objdump",
+		"AR": target_prefix + "ar",
+		"NM": target_prefix + "nm",
+		"M4": "m4",
+		"STRINGS": target_prefix + "strings"
+	}
+	PATH = os.environ['PATH'].split(os.pathsep)
+	for tool in tools:
+		if tool in os.environ:
+			for path in PATH:
+				if os.path.isfile(os.path.join(path, tools[tool])):
+					env[tool] = os.path.join(path, os.environ[tool])
+					break
+	env['CROSS_COMPILE'] = target_prefix[:-1]
+except:
+	msg = "ERROR in Yocto cross-toolchain environment"
+	Exit(msg)
+
+if env['CONFIG_ENVIRONMENT_IMPORT']:
+    print("warning: importing some environment variables for OS: yocto" )
+    for ev in [
+        'PATH',
+        'PKG_CONFIG',
+        'PKG_CONFIG_PATH',
+        'PKG_CONFIG_SYSROOT_DIR'
+    ]:
+        if os.environ.get(ev) is not None:
+            env['ENV'][ev] = os.environ.get(ev)
+    if os.environ['LDFLAGS'] != None:
+        env.AppendUnique(LINKFLAGS=Split(os.environ['LDFLAGS']))
+
+env.ParseConfig('pkg-config --cflags --libs sdl2')
+print env['CPPPATH']
 
 sourceFiles = Split('''
 			src/audiosink.cpp
diff --git a/libgambatte/SConstruct b/libgambatte/SConstruct
index e882514b..7527706b 100644
--- a/libgambatte/SConstruct
+++ b/libgambatte/SConstruct
@@ -10,6 +10,44 @@ env = Environment(CPPPATH = ['src', 'include', '../common'],
                   CXXFLAGS = global_cxxflags + global_defines,
                   variables = vars)
 
+env['CONFIG_ENVIRONMENT_IMPORT'] = True
+
+'''
+This code injects Yocto cross-compilation tools+flags into the scons
+construction environment in order to invoke the relevant tools while
+performing a build.
+'''
+import os.path
+try:
+	CC = os.environ['CC']
+	target_prefix = CC.split()[0]
+	target_prefix = target_prefix[:-3]
+	tools = {
+		"CC": target_prefix + "gcc",
+		"CXX": target_prefix + "g++",
+		"AS": target_prefix + "as",
+		"LD": target_prefix + "ld",
+		"GDB": target_prefix + "gdb",
+		"STRIP": target_prefix + "strip",
+		"RANLIB": target_prefix + "ranlib",
+		"OBJCOPY": target_prefix + "objcopy",
+		"OBJDUMP": target_prefix + "objdump",
+		"AR": target_prefix + "ar",
+		"NM": target_prefix + "nm",
+		"M4": "m4",
+		"STRINGS": target_prefix + "strings"
+	}
+	PATH = os.environ['PATH'].split(os.pathsep)
+	for tool in tools:
+		if tool in os.environ:
+			for path in PATH:
+				if os.path.isfile(os.path.join(path, tools[tool])):
+					env[tool] = os.path.join(path, os.environ[tool])
+					break
+	env['CROSS_COMPILE'] = target_prefix[:-1]
+except:
+	msg = "ERROR in Yocto cross-toolchain environment"
+	Exit(msg)
 sourceFiles = Split('''
 			src/bitmap_font.cpp
 			src/cpu.cpp
